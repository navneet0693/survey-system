<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Question Option Entity.
 *
 * Represents a single option for multiple choice questions (single choice or
 * multiple choice).
 *
 * Key Features:
 * - Text-based options for choice questions
 * - Ordered display within questions
 * - Validation for option text length
 *
 * Business Rules:
 * - Options must belong to a question
 * - Option text cannot be empty
 * - Options are ordered by position for consistent display
 * - Options are immutable once created (for data integrity)
 *
 * Relationships:
 * - Many-to-One with Question entity
 * - Referenced by QuestionResponse entities for selected options
 *
 * @author navneet0693
 *
 * @ORM\Entity(repositoryClass="App\Repository\QuestionOptionRepository")
 *
 * @ORM\Table(name="question_options")
 */
#[ORM\Entity(repositoryClass: 'App\Repository\QuestionOptionRepository')]
#[ORM\Table(name: 'question_options')]
class QuestionOption
{
    /**
     * Unique identifier for the option
     * Auto-generated by Doctrine ORM.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer', nullable: false)]
    private int $id;

    /**
     * The question this option belongs to
     * Required relationship - options cannot exist without a question.
     */
    #[ORM\ManyToOne(targetEntity: Question::class, inversedBy: 'options')]
    #[ORM\JoinColumn(nullable: false)]
    private Question $question;

    /**
     * The option text displayed to respondents
     * Required field with length validation for UI constraints.
     */
    #[ORM\Column(type: 'string', length: 500)]
    #[Assert\NotBlank(message: 'Option text is required')]
    #[Assert\Length(
        min: 1,
        max: 500,
        minMessage: 'Option text cannot be empty',
        maxMessage: 'Option text cannot be longer than {{ limit }} characters'
    )]
    private string $optionText;

    /**
     * Display order within the question
     * Used for consistent option ordering.
     */
    #[ORM\Column(type: 'integer')]
    private int $orderPosition = 0;

    /**
     * Timestamp when option was created
     * Auto-set in constructor.
     */
    #[ORM\Column(type: 'datetime')]
    private \DateTime $createdAt;

    /**
     * Constructor initializes timestamp
     * Sets creation timestamp to current time.
     */
    public function __construct()
    {
        $this->createdAt = new \DateTime();
    }

    /**
     * Get the unique identifier of the option.
     *
     * @return int|null The option ID, null if not persisted
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Get the question this option belongs to.
     *
     * @return Question The parent question
     */
    public function getQuestion(): Question
    {
        return $this->question;
    }

    /**
     * Set the question this option belongs to.
     *
     * @param Question $question The parent question
     *
     * @return self For method chaining
     */
    public function setQuestion(Question $question): self
    {
        $this->question = $question;
        return $this;
    }

    /**
     * Get the option text displayed to respondents.
     *
     * @return string The option text
     */
    public function getOptionText(): string
    {
        return $this->optionText;
    }

    /**
     * Set the option text.
     *
     * @param string $optionText The option text
     *
     * @return self For method chaining
     */
    public function setOptionText(string $optionText): self
    {
        $this->optionText = $optionText;

        return $this;
    }

    /**
     * Get the display order position.
     *
     * @return int The order position
     */
    public function getOrderPosition(): int
    {
        return $this->orderPosition;
    }

    /**
     * Set the display order position.
     *
     * @param int $orderPosition The order position
     *
     * @return self For method chaining
     */
    public function setOrderPosition(int $orderPosition): self
    {
        $this->orderPosition = $orderPosition;

        return $this;
    }

    /**
     * Get the creation timestamp.
     *
     * @return \DateTime The creation timestamp
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->createdAt;
    }

    /**
     * Set the creation timestamp.
     *
     * @param \DateTime $createdAt The creation timestamp
     *
     * @return self For method chaining
     */
    public function setCreatedAt(\DateTime $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }
}
