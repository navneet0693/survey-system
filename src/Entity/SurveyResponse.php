<?php

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Survey Response Entity.
 *
 * Represents a complete survey submission by a user. Each survey response
 * contains all answers to questions in a specific survey and is linked to
 * a user who submitted it.
 *
 * Business Rules:
 * - Users can only submit one response per survey
 * - Survey responses are immutable after submission
 * - All required questions must be answered
 * - Responses are linked to specific surveys and users
 *
 * Relationships:
 * - Many-to-One with Survey entity
 * - One-to-Many with QuestionResponse entities
 * - Belongs to a User (hardcoded, ToDo)
 *
 * @author navneet0693
 *
 * @ORM\Entity(repositoryClass="App\Repository\SurveyResponseRepository")
 *
 * @ORM\Table(name="survey_responses")
 *
 * @ORM\UniqueConstraint(name="unique_user_survey", columns={"user_id", "survey_id"})
 */
#[ORM\Entity(repositoryClass: 'App\Repository\SurveyResponseRepository')]
#[ORM\Table(name: 'survey_responses')]
#[ORM\UniqueConstraint(name: 'unique_user_survey', columns: ['user_id', 'survey_id'])]
class SurveyResponse
{
    /**
     * Unique identifier for the survey response
     * Auto-generated by Doctrine ORM.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer', nullable: false)]
    private int $id;

    /**
     * The survey this response belongs to
     * Required relationship - responses cannot exist without a survey.
     */
    #[ORM\ManyToOne(targetEntity: Survey::class, inversedBy: 'responses')]
    #[ORM\JoinColumn(nullable: false)]
    private Survey $survey;

    /**
     * ID of the user who submitted this response
     * Hardcoded to 1 for assignment simplicity.
     */
    #[ORM\Column(type: 'integer')]
    private int $userId;

    /**
     * Timestamp when the response was submitted
     * Auto-set in constructor.
     */
    #[ORM\Column(type: 'datetime')]
    private \DateTime $submittedAt;

    /**
     * IP address of the user who submitted the response
     * Optional field for audit and analytics purposes.
     */
    #[ORM\Column(type: 'string', length: 45, nullable: true)]
    private ?string $ipAddress = null;

    /**
     * Collection of individual question responses
     * Contains answers to each question in the survey.
     */
    #[ORM\OneToMany(targetEntity: QuestionResponse::class, mappedBy: 'surveyResponse', cascade: ['persist', 'remove'])]
    private Collection $questionResponses;

    /**
     * Constructor initializes collections and timestamps
     * Sets submission timestamp to current time and creates empty question responses collection.
     */
    public function __construct()
    {
        $this->questionResponses = new ArrayCollection();
        $this->submittedAt = new \DateTime();
    }

    /**
     * Get the unique identifier of the survey response.
     *
     * @return int|null The response ID, null if not persisted
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Get the survey this response belongs to.
     *
     * @return Survey The parent survey
     */
    public function getSurvey(): Survey
    {
        return $this->survey;
    }

    /**
     * Set the survey this response belongs to.
     *
     * @param Survey $survey The parent survey
     *
     * @return self For method chaining
     */
    public function setSurvey(Survey $survey): self
    {
        $this->survey = $survey;

        return $this;
    }

    /**
     * Get the user ID who submitted this response.
     *
     * @return int The user ID
     */
    public function getUserId(): int
    {
        return $this->userId;
    }

    /**
     * Set the user ID who submitted this response.
     *
     * @param int $userId The user ID
     *
     * @return self For method chaining
     */
    public function setUserId(int $userId): self
    {
        $this->userId = $userId;

        return $this;
    }

    /**
     * Get the submission timestamp.
     *
     * @return \DateTime The submission timestamp
     */
    public function getSubmittedAt(): \DateTime
    {
        return $this->submittedAt;
    }

    /**
     * Set the submission timestamp.
     *
     * @param \DateTime $submittedAt The submission timestamp
     *
     * @return self For method chaining
     */
    public function setSubmittedAt(\DateTime $submittedAt): self
    {
        $this->submittedAt = $submittedAt;

        return $this;
    }

    /**
     * Get the IP address of the user who submitted the response.
     *
     * @return string|null The IP address, null if not recorded
     */
    public function getIpAddress(): ?string
    {
        return $this->ipAddress;
    }

    /**
     * Set the IP address of the user who submitted the response.
     *
     * @param string|null $ipAddress The IP address
     *
     * @return self For method chaining
     */
    public function setIpAddress(?string $ipAddress): self
    {
        $this->ipAddress = $ipAddress;

        return $this;
    }

    /**
     * Get the collection of question responses.
     *
     * @return Collection The question responses collection
     */
    public function getQuestionResponses(): Collection
    {
        return $this->questionResponses;
    }

    /**
     * Add a question response to this survey response.
     *
     * @param QuestionResponse $questionResponse The question response to add
     *
     * @return self For method chaining
     */
    public function addQuestionResponse(QuestionResponse $questionResponse): self
    {
        if (!$this->questionResponses->contains($questionResponse)) {
            $this->questionResponses[] = $questionResponse;
            $questionResponse->setSurveyResponse($this);
        }

        return $this;
    }

    /**
     * Remove a question response from this survey response.
     *
     * @param QuestionResponse $questionResponse The question response to remove
     *
     * @return self For method chaining
     */
    public function removeQuestionResponse(QuestionResponse $questionResponse): self
    {
        if ($this->questionResponses->removeElement($questionResponse)) {
            if ($questionResponse->getSurveyResponse() === $this) {
                $questionResponse->setSurveyResponse($this);
            }
        }

        return $this;
    }
}
