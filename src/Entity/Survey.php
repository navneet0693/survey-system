<?php

namespace App\Entity;

use App\Repository\SurveyRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Survey Entity.
 *
 * Represents a survey that can be created by property managers and filled out by tenants.
 * This is the central entity in the survey system, containing all survey metadata,
 * questions, and responses.
 *
 * Relationships:
 * - One-to-Many with Question entities
 * - One-to-Many with SurveyResponse entities
 *
 * @author navneet0693
 *
 * @ORM\Entity(repositoryClass=SurveyRepository::class)
 *
 * @ORM\Table(name="surveys")
 */
#[ORM\Entity(repositoryClass: SurveyRepository::class)]
#[ORM\Table(name: 'surveys')]
class Survey
{
    /**
     * Unique identifier for the survey
     * Auto-generated by Doctrine ORM.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer', nullable: false)]
    private int $id;

    /**
     * Survey title displayed to respondents
     * Required field with length validation.
     */
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\NotBlank(message: 'Survey title cannot be empty')]
    #[Assert\Length(
        min: 3,
        max: 255,
        minMessage: 'Survey title must be at least {{ limit }} characters long',
        maxMessage: 'Survey title cannot be longer than {{ limit }} characters'
    )]
    private string $title;

    /**
     * Optional survey description for additional context
     * Limited to 1000 characters for UI constraints.
     */
    #[ORM\Column(type: 'text', nullable: true)]
    #[Assert\Length(
        max: 1000,
        maxMessage: 'Survey description cannot be longer than {{ limit }} characters'
    )]
    private ?string $description = null;

    /**
     * Current status of the survey (DRAFT, ACTIVE, CLOSED)
     * Controls whether survey can receive responses.
     */
    #[ORM\Column(type: 'string', enumType: SurveyStatus::class)]
    #[Assert\NotNull(message: 'Survey status is required')]
    private SurveyStatus $status = SurveyStatus::DRAFT;

    /**
     * Optional start date for survey availability
     * Null means survey is available immediately.
     */
    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Assert\Type(\DateTime::class)]
    private ?\DateTime $startsAt = null;

    /**
     * Optional end date for survey availability
     * Must be after start date if both are set.
     */
    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Assert\Type(\DateTime::class)]
    #[Assert\Expression(
        'this.getStartsAt() == null or this.getEndsAt() == null or this.getStartsAt() < this.getEndsAt()',
        message: 'End date must be after start date'
    )]
    private ?\DateTime $endsAt = null;

    /**
     * Timestamp when survey was created
     * Auto-set in constructor.
     */
    #[ORM\Column(type: 'datetime')]
    #[Assert\NotNull]
    #[Assert\Type(\DateTime::class)]
    private \DateTime $createdAt;

    /**
     * Timestamp when survey was last updated
     * Auto-updated on entity changes.
     */
    #[ORM\Column(type: 'datetime')]
    #[Assert\NotNull]
    #[Assert\Type(\DateTime::class)]
    private \DateTime $updatedAt;

    /**
     * Collection of questions in this survey
     * Ordered by position for consistent display.
     */
    #[ORM\OneToMany(targetEntity: Question::class, mappedBy: 'survey', cascade: ['persist', 'remove'])]
    #[ORM\OrderBy(['orderPosition' => 'ASC'])]
    #[Assert\Valid]
    private Collection $questions;

    /**
     * Collection of responses submitted for this survey
     * Used for results aggregation and analytics.
     */
    #[ORM\OneToMany(targetEntity: SurveyResponse::class, mappedBy: 'survey')]
    private Collection $responses;

    /**
     * Constructor initializes collections and timestamps
     * Sets default status to DRAFT and creates empty collections.
     */
    public function __construct()
    {
        $this->questions = new ArrayCollection();
        $this->responses = new ArrayCollection();
        $this->createdAt = new \DateTime();
        $this->updatedAt = new \DateTime();
    }

    /**
     * Get the unique identifier of the survey.
     *
     * @return int|null The survey ID, null if not persisted
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Get the survey title.
     *
     * @return string The survey title
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * Set the survey title and update the modification timestamp.
     *
     * @param string $title The new survey title
     *
     * @return self For method chaining
     */
    public function setTitle(string $title): self
    {
        $this->title = $title;
        $this->updateTimestamp();

        return $this;
    }

    /**
     * Get the survey description.
     *
     * @return string|null The survey description, null if not set
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Set the survey description and update the modification timestamp.
     *
     * @param string|null $description The new survey description
     *
     * @return self For method chaining
     */
    public function setDescription(?string $description): self
    {
        $this->description = $description;
        $this->updateTimestamp();

        return $this;
    }

    /**
     * Get the current survey status.
     *
     * @return SurveyStatus The current status (DRAFT, ACTIVE, CLOSED)
     */
    public function getStatus(): SurveyStatus
    {
        return $this->status;
    }

    /**
     * Set the survey status and update the modification timestamp.
     *
     * @param SurveyStatus $status The new status
     *
     * @return self For method chaining
     */
    public function setStatus(SurveyStatus $status): self
    {
        $this->status = $status;
        $this->updateTimestamp();

        return $this;
    }

    /**
     * Get the survey start date.
     *
     * @return \DateTime|null The start date, null if not set
     */
    public function getStartsAt(): ?\DateTime
    {
        return $this->startsAt;
    }

    /**
     * Set the survey start date and update the modification timestamp.
     *
     * @param \DateTime|null $startsAt The start date
     *
     * @return self For method chaining
     */
    public function setStartsAt(?\DateTime $startsAt): self
    {
        $this->startsAt = $startsAt;
        $this->updateTimestamp();

        return $this;
    }

    /**
     * Get the survey end date.
     *
     * @return \DateTime|null The end date, null if not set
     */
    public function getEndsAt(): ?\DateTime
    {
        return $this->endsAt;
    }

    /**
     * Set the survey end date and update the modification timestamp.
     *
     * @param \DateTime|null $endsAt The end date
     *
     * @return self For method chaining
     */
    public function setEndsAt(?\DateTime $endsAt): self
    {
        $this->endsAt = $endsAt;
        $this->updateTimestamp();

        return $this;
    }

    /**
     * Get the creation timestamp.
     *
     * @return \DateTime The creation timestamp
     */
    public function getCreatedAt(): \DateTime
    {
        return $this->createdAt;
    }

    /**
     * Set the creation timestamp.
     *
     * @param \DateTime $createdAt The creation timestamp
     *
     * @return self For method chaining
     */
    public function setCreatedAt(\DateTime $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get the last update timestamp.
     *
     * @return \DateTime The last update timestamp
     */
    public function getUpdatedAt(): \DateTime
    {
        return $this->updatedAt;
    }

    /**
     * Set the last update timestamp.
     *
     * @param \DateTime $updatedAt The last update timestamp
     *
     * @return self For method chaining
     */
    public function setUpdatedAt(\DateTime $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get the collection of questions in this survey.
     *
     * @return Collection The questions collection
     */
    public function getQuestions(): Collection
    {
        return $this->questions;
    }

    /**
     * Add a question to this survey.
     *
     * @param Question $question The question to add
     *
     * @return self For method chaining
     */
    public function addQuestion(Question $question): self
    {
        if (!$this->questions->contains($question)) {
            $this->questions[] = $question;
            $question->setSurvey($this);
        }

        return $this;
    }

    /**
     * Remove a question from this survey.
     *
     * @param Question $question The question to remove
     *
     * @return self For method chaining
     */
    public function removeQuestion(Question $question): self
    {
        if ($this->questions->removeElement($question)) {
            if ($question->getSurvey() === $this) {
                $question->setSurvey($this);
            }
        }

        return $this;
    }

    /**
     * Get the total number of responses for this survey.
     *
     * @return int The number of responses
     */
    public function getResponseCount(): int
    {
        return $this->responses->count();
    }

    /**
     * Update the modification timestamp to current time
     * Called automatically when survey properties are modified.
     */
    private function updateTimestamp(): void
    {
        $this->updatedAt = new \DateTime();
    }

    /**
     * Check if the survey is currently active and available for responses.
     *
     * A survey is considered active if:
     * - Status is ACTIVE
     * - Start date is null or in the past
     * - End date is null or in the future
     *
     * @return bool True if survey is active and accepting responses
     */
    public function isActive(): bool
    {
        return SurveyStatus::ACTIVE === $this->status
            && (null === $this->startsAt || $this->startsAt <= new \DateTime())
            && (null === $this->endsAt || $this->endsAt >= new \DateTime());
    }
}
